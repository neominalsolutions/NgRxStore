{"ast":null,"code":"import { edit, remove } from 'src/app/state/todos/todos.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\n\nfunction TodolistComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodolistComponent_li_1_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const item_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.delete(item_r1.id);\n    });\n    i0.ɵɵtext(3, \"x\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function TodolistComponent_li_1_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const item_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.edit(item_r1.id);\n    });\n    i0.ɵɵtext(5, \"edit\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", item_r1.title, \" \", item_r1.completed, \" \");\n  }\n}\n\nexport let TodolistComponent = /*#__PURE__*/(() => {\n  class TodolistComponent {\n    // store üzerinden hangi reducer'ı dinleyeceğimizi hangi state takip edeceğimizi tanıtırız.\n    constructor(store) {\n      this.store = store;\n      this.todos = []; // private store: Store<{ todoReducer: TodoState }> constrcutor da store servisine bağlanırız. ve select operatörü ile todoReducer dinleyeceğimizi subscribe olucağımızı söyleriz.\n\n      this.todoReducer$ = store.select('todoReducer');\n    }\n\n    ngOnInit() {\n      this.todoReducer$.subscribe(res => {\n        this.todos = [...res.todos];\n      });\n    }\n\n    delete(id) {\n      // store üzerinden dispatch ile bir eylemde bulun diyoruz.\n      // store üzerinden silme action'ı çağır\n      // payload actiondan taşınacak aktarılacak değer { todoId: id }\n      this.store.dispatch(remove({\n        todoId: id\n      }));\n    }\n\n    edit(id) {\n      this.store.dispatch(edit({\n        todoId: id\n      }));\n    }\n\n  }\n\n  TodolistComponent.ɵfac = function TodolistComponent_Factory(t) {\n    return new (t || TodolistComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n\n  TodolistComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodolistComponent,\n    selectors: [[\"app-todolist\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function TodolistComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ul\");\n        i0.ɵɵtemplate(1, TodolistComponent_li_1_Template, 6, 2, \"li\", 0);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todos);\n      }\n    },\n    directives: [i2.NgForOf],\n    styles: [\"\"]\n  });\n  return TodolistComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}