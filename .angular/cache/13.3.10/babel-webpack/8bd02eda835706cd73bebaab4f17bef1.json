{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { load, add, remove, edit, select, update } from './todos.action';\nexport const initialState = {\n  todos: [],\n  filteredTodos: [],\n  selectedTodo: undefined\n}; // reducer oluşturmak için createReducer function kullanırız.\n// on ile action dinleriz\n// reducer initialState ile başlar\n\nconst _todoReducer = createReducer(initialState, on(load, (state, {\n  todos\n}) => Object.assign(Object.assign({}, state), {\n  todos: todos\n})), on(add, (state, {\n  todo\n}) => Object.assign(Object.assign({}, state), {\n  todos: [todo, ...state.todos]\n})), on(remove, (state, {\n  todoId\n}) => Object.assign(Object.assign({}, state), {\n  todos: [...state.todos.filter(x => x.id != todoId)]\n})), on(edit, (state, {\n  todoId\n}) => editFunc(state, todoId)), on(select, (state, {\n  todoId\n}) => Object.assign(Object.assign({}, state), {\n  selectedTodo: todoId == -1 ? undefined : Object.assign({}, state.todos.find(x => x.id == todoId))\n})), on(update, (state, {\n  todo\n}) => {\n  let updatedTodos = state.todos.map(item => item.id == todo.id ? item = Object.assign({}, todo) : item);\n  return Object.assign(Object.assign({}, state), {\n    todos: [...updatedTodos]\n  });\n}));\n\nfunction editFunc(state, todoId) {\n  return Object.assign(Object.assign({}, state), {\n    selectedTodo: Object.assign({}, state.todos.find(x => x.id == todoId))\n  });\n}\n\nexport function TodoReducer(state, action) {\n  return _todoReducer(state, action);\n}","map":null,"metadata":{},"sourceType":"module"}